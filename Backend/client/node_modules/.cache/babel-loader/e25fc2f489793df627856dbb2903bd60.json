{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from './constants';\nimport { setAlert } from './alertAction';\nimport setAuthToken from '../util/setAuthToken'; //Authenticate User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const response = await axios.get(\"http://localhost:5000/api/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: response.token\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/users\", body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: response.data\n      });\n      dispatch(loadUser);\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => {\n          dispatch(setAlert(error, \"danger\"));\n        });\n      }\n\n      dispatch({\n        type: REGISTER_FAIL\n      });\n      dispatch(setAlert('Email already exist', 'danger'));\n    }\n  };\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const response = await axios.post(\"http://localhost:5000/api/auth\", body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: response.data\n    });\n    dispatch(loadUser);\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setAlert(error, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch(setAlert(\"Incorrect Password or Email\", 'danger'));\n  }\n}; //Logout User\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/lovelbangura/Desktop/Project/lets_connect/Backend/client/src/actions/authAction.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","setAlert","setAuthToken","loadUser","dispatch","localStorage","token","response","get","type","payload","err","register","name","email","password","config","headers","body","JSON","stringify","post","data","errors","forEach","error","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT,\n    CLEAR_PROFILE\n} from './constants'\nimport { setAlert } from './alertAction'\nimport setAuthToken from '../util/setAuthToken'\n\n//Authenticate User\nexport const loadUser = () => async dispatch => {\n    if (localStorage.token) {\n        setAuthToken(localStorage.token)\n    }\n    try {\n        const response = await axios.get(\"http://localhost:5000/api/auth\")\n        dispatch({\n            type: USER_LOADED,\n            payload: response.token\n        })\n\n    } catch (err) {\n        dispatch({\n            type: AUTH_ERROR\n        })\n    }\n}\n\n\n// Register User\nexport const register = ({ name, email, password }) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({ name, email, password })\n\n    try {\n        const response = await axios.post(\"http://localhost:5000/api/users\", body, config)\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: response.data\n        })\n        dispatch(loadUser)\n\n    } catch (err) {\n        const errors = err.response.data.errors\n\n        if (errors) {\n            errors.forEach(error => {\n                dispatch(setAlert(error, \"danger\"))\n            });\n        }\n\n        dispatch({\n            type: REGISTER_FAIL,\n        })\n        dispatch(setAlert('Email already exist', 'danger'))\n    }\n}\n\n// Login User\nexport const login = (email, password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({ email, password })\n\n    try {\n\n        const response = await axios.post(\"http://localhost:5000/api/auth\", body, config)\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: response.data\n        })\n        dispatch(loadUser)\n    } catch (err) {\n        const errors = err.response.data.errors\n\n        if (errors) {\n            errors.forEach(error => {\n                dispatch(setAlert(error, 'danger'))\n            });\n        }\n\n\n        dispatch({\n            type: LOGIN_FAIL\n        })\n        dispatch(setAlert(\"Incorrect Password or Email\", 'danger'))\n    }\n}\n\n//Logout User\nexport const logout = () => dispatch => {\n    dispatch({\n        type: CLEAR_PROFILE\n    })\n    dispatch({\n        type: LOGOUT\n    })\n}"]},"metadata":{},"sourceType":"module"}