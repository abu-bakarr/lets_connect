{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alertAction';\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, REMOVE_COMMENT } from './constants';\nexport const getPosts = () => async dispatch => {\n  try {\n    const response = await axios.get(\"http://localhost:5000/api/posts\");\n    dispatch({\n      type: GET_POSTS,\n      payload: response.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Add users Like\n\nexport const updateLike = id => async dispatch => {\n  try {\n    const response = await axios.put(`http://localhost:5000/api/posts/likes/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: response.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Remove users Like\n\nexport const removeLike = id => async dispatch => {\n  try {\n    const response = await axios.put(`http://localhost:5000/api/posts/unlike/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: response.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //delete users Post\n\nexport const deletePost = id => async dispatch => {\n  try {\n    await axios.delete(`http://localhost:5000/api/posts/${id}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: id\n    });\n    dispatch(setAlert('Post removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //add users Post\n\nexport const addPost = formData => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const response = await axios.post(\"http://localhost:5000/api/posts\", formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: response.data\n    });\n    dispatch(setAlert('Post Added', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Get  Single Post\n\nexport const getPost = id => async dispatch => {\n  try {\n    const response = await axios.get(`http://localhost:5000/api/posts/${id}`);\n    dispatch({\n      type: GET_POST,\n      payload: response.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Add Cmment\n\nexport const addComment = (postId, formData) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const response = await axios.post(`http://localhost:5000/api/posts/comment/${postId}`, formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: response.data\n    });\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Remove Cmment\n\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    await axios.delete(`http://localhost:5000/api/posts/comment/${postId}/${commentId}`);\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n    dispatch(setAlert('Comment Deleted', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/lovelbangura/Desktop/Project/lets_connect/Backend/client/src/actions/postAction.js"],"names":["axios","setAlert","GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","REMOVE_COMMENT","getPosts","dispatch","response","get","type","payload","data","err","msg","statusText","status","updateLike","id","put","likes","removeLike","deletePost","delete","addPost","formData","config","headers","post","getPost","addComment","postId","deleteComment","commentId"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { setAlert } from './alertAction'\nimport {\n    GET_POSTS,\n    POST_ERROR,\n    UPDATE_LIKES,\n    DELETE_POST,\n    ADD_POST,\n    GET_POST,\n    REMOVE_COMMENT\n} from './constants'\n\nexport const getPosts = () => async dispatch => {\n    try {\n        const response = await axios.get(\"http://localhost:5000/api/posts\")\n\n        dispatch({\n            type: GET_POSTS,\n            payload: response.data\n        })\n    } catch (err) {\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n\n    }\n}\n\n//Add users Like\nexport const updateLike = id => async dispatch => {\n    try {\n        const response = await axios.put(`http://localhost:5000/api/posts/likes/${id}`)\n        dispatch({\n            type: UPDATE_LIKES,\n            payload: { id, likes: response.data }\n        })\n    } catch (err) {\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n\n    }\n}\n\n\n//Remove users Like\nexport const removeLike = id => async dispatch => {\n    try {\n        const response = await axios.put(`http://localhost:5000/api/posts/unlike/${id}`)\n        dispatch({\n            type: UPDATE_LIKES,\n            payload: { id, likes: response.data }\n        })\n    } catch (err) {\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n\n    }\n}\n\n//delete users Post\nexport const deletePost = id => async dispatch => {\n    try {\n        await axios.delete(`http://localhost:5000/api/posts/${id}`)\n        dispatch({\n            type: DELETE_POST,\n            payload: id\n        })\n        dispatch(setAlert('Post removed', 'success'))\n    } catch (err) {\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n\n    }\n}\n\n//add users Post\nexport const addPost = formData => async dispatch => {\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    try {\n        const response = await axios.post(\"http://localhost:5000/api/posts\", formData, config)\n        dispatch({\n            type: ADD_POST,\n            payload: response.data\n        })\n        dispatch(setAlert('Post Added', 'success'))\n    } catch (err) {\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n\n    }\n}\n\n//Get  Single Post\nexport const getPost = id => async dispatch => {\n    try {\n        const response = await axios.get(`http://localhost:5000/api/posts/${id}`)\n        dispatch({\n            type: GET_POST,\n            payload: response.data\n        })\n\n    } catch (err) {\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n\n    }\n}\n\n//Add Cmment\nexport const addComment = (postId, formData) => async dispatch => {\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    try {\n        const response = await axios.post(`http://localhost:5000/api/posts/comment/${postId}`, formData, config)\n        dispatch({\n            type: ADD_POST,\n            payload: response.data\n        })\n        dispatch(setAlert('Comment Added', 'success'))\n    } catch (err) {\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n\n    }\n}\n\n//Remove Cmment\nexport const deleteComment = (postId, commentId) => async dispatch => {\n\n    try {\n        await axios.delete(`http://localhost:5000/api/posts/comment/${postId}/${commentId}`)\n        dispatch({\n            type: REMOVE_COMMENT,\n            payload: commentId\n        })\n        dispatch(setAlert('Comment Deleted', 'success'))\n    } catch (err) {\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n\n    }\n}"]},"metadata":{},"sourceType":"module"}