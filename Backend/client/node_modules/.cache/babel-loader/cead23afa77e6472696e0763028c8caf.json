{"ast":null,"code":"import axios from 'axios';\nimport { GET_PROFILE, PROFILE_ERROR, UPDATE_PROFILE, ACCOUNT_DELETED, GET_PROFILES, CLEAR_PROFILE, GET_REPOS } from './constants';\nimport { setAlert } from './alertAction'; //Get current users profile after loggin\n\nexport const getUserProfile = () => async dispatch => {\n  const accessToken = localStorage.getItem(\"token\");\n\n  try {\n    const response = await axios.get(\"http://localhost:5000/api/profile/me\", {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `bearer ${accessToken}`\n      }\n    });\n    console.log(\"profile Action =>\", response);\n    dispatch({\n      type: GET_PROFILE,\n      payload: response.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Get All users profile after loggin\n\nexport const getAllProfiles = () => async dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n\n  try {\n    const response = await axios.get(\"http://localhost:5000/api/profile\");\n    dispatch({\n      type: GET_PROFILES,\n      payload: response.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Get All users profile by ID after loggin\n\nexport const getProfileById = userId => async dispatch => {\n  try {\n    const response = await axios.get(`http://localhost:5000/api/profile/user/${userId}`);\n    dispatch({\n      type: GET_PROFILE,\n      payload: response.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Get  users Git hub repos \n\nexport const getUserGithub = username => async dispatch => {\n  try {\n    const response = await axios.get(`http://localhost:5000/api/profile/github/${username}`);\n    dispatch({\n      type: GET_REPOS,\n      payload: response.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Create or Update User Profile\n\nexport const createUserProfile = function (formData, history) {\n  let edit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return async dispatch => {\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const response = await axios.post(\"http://localhost:5000/api/profile\", formData, config);\n      dispatch({\n        type: GET_PROFILE,\n        payload: response.data\n      });\n      dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n\n      if (!edit) {\n        history.push('/dashboard');\n      }\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => {\n          dispatch(setAlert(error.msg, 'danger'));\n        });\n      }\n\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  };\n}; // Add Experience \n\nexport const addUserExperience = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const response = await axios.put(\"http://localhost:5000/api/profile/experience\", formData, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: response.data\n    });\n    dispatch(setAlert('Experience Created', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setAlert(error, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Education \n\nexport const addUserEducation = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const response = await axios.put(\"http://localhost:5000/api/profile/education\", formData, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: response.data\n    });\n    dispatch(setAlert('Education Created', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete  User Experience\n\nexport const deleteUserExperience = id => async dispatch => {\n  try {\n    const response = await axios.delete(`http://localhost:5000/api/profile/experience/${id}`);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: response.data\n    });\n    dispatch(setAlert('Experience Deleted', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete  User Education\n\nexport const deleteUserEducation = id => async dispatch => {\n  try {\n    const response = await axios.delete(`http://localhost:5000/api/profile/education/${id}`);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: response.data\n    });\n    dispatch(setAlert('Education Deleted', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete  User Education\n\nexport const deleteUserAccount = () => async dispatch => {\n  if (window.confirm('Are you sure ? Please note you all your information will be deleted')) {\n    try {\n      await axios.delete(\"http://localhost:5000/api/profile\");\n      dispatch({\n        type: CLEAR_PROFILE\n      });\n      dispatch({\n        type: ACCOUNT_DELETED\n      });\n      dispatch(setAlert('Your account has been deleted'));\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/Users/lovelbangura/Desktop/Project/lets_connect/Backend/client/src/actions/profileAction.js"],"names":["axios","GET_PROFILE","PROFILE_ERROR","UPDATE_PROFILE","ACCOUNT_DELETED","GET_PROFILES","CLEAR_PROFILE","GET_REPOS","setAlert","getUserProfile","dispatch","accessToken","localStorage","getItem","response","get","method","headers","console","log","type","payload","data","err","msg","statusText","status","getAllProfiles","getProfileById","userId","getUserGithub","username","createUserProfile","formData","history","edit","config","post","push","errors","forEach","error","addUserExperience","put","addUserEducation","deleteUserExperience","id","delete","deleteUserEducation","deleteUserAccount","window","confirm"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,WADJ,EAEIC,aAFJ,EAGIC,cAHJ,EAIIC,eAJJ,EAKIC,YALJ,EAMIC,aANJ,EAOIC,SAPJ,QAQO,aARP;AASA,SAASC,QAAT,QAAyB,eAAzB,C,CAEA;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAClD,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB;;AACA,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAU,sCAAV,EAAkD;AACrEC,MAAAA,MAAM,EAAE,KAD6D;AAErEC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB,kBAFX;AAGL,yBAAkB,UAASN,WAAY;AAHlC;AAF4D,KAAlD,CAAvB;AASAO,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCL,QAAjC;AAEAJ,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAEnB,WADD;AAELoB,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAFb,KAAD,CAAR;AAKH,GAjBD,CAiBE,OAAOC,GAAP,EAAY;AAEVb,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAElB,aADD;AAELmB,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACT,QAAJ,CAAaW,UAApB;AAAgCC,QAAAA,MAAM,EAAEH,GAAG,CAACT,QAAJ,CAAaY;AAArD;AAFJ,KAAD,CAAR;AAKH;AACJ,CA3BM,C,CA6BP;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAM,MAAMjB,QAAN,IAAkB;AAClDA,EAAAA,QAAQ,CAAC;AAAEU,IAAAA,IAAI,EAAEd;AAAR,GAAD,CAAR;;AACA,MAAI;AACA,UAAMQ,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAU,mCAAV,CAAvB;AAEAL,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAEf,YADD;AAELgB,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAFb,KAAD,CAAR;AAIH,GAPD,CAOE,OAAOC,GAAP,EAAY;AAEVb,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAElB,aADD;AAELmB,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACT,QAAJ,CAAaW,UAApB;AAAgCC,QAAAA,MAAM,EAAEH,GAAG,CAACT,QAAJ,CAAaY;AAArD;AAFJ,KAAD,CAAR;AAKH;AACJ,CAjBM,C,CAmBP;;AACA,OAAO,MAAME,cAAc,GAAGC,MAAM,IAAI,MAAMnB,QAAN,IAAkB;AACtD,MAAI;AACA,UAAMI,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAW,0CAAyCc,MAAO,EAA3D,CAAvB;AAEAnB,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAEnB,WADD;AAELoB,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAFb,KAAD,CAAR;AAKH,GARD,CAQE,OAAOC,GAAP,EAAY;AAEVb,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAElB,aADD;AAELmB,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACT,QAAJ,CAAaW,UAApB;AAAgCC,QAAAA,MAAM,EAAEH,GAAG,CAACT,QAAJ,CAAaY;AAArD;AAFJ,KAAD,CAAR;AAKH;AACJ,CAjBM,C,CAmBP;;AACA,OAAO,MAAMI,aAAa,GAAGC,QAAQ,IAAI,MAAMrB,QAAN,IAAkB;AACvD,MAAI;AACA,UAAMI,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAW,4CAA2CgB,QAAS,EAA/D,CAAvB;AAEArB,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAEb,SADD;AAELc,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAFb,KAAD,CAAR;AAKH,GARD,CAQE,OAAOC,GAAP,EAAY;AACVb,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAElB,aADD;AAELmB,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACT,QAAJ,CAAaW,UAApB;AAAgCC,QAAAA,MAAM,EAAEH,GAAG,CAACT,QAAJ,CAAaY;AAArD;AAFJ,KAAD,CAAR;AAKH;AACJ,CAhBM,C,CAkBP;;AACA,OAAO,MAAMM,iBAAiB,GAAG,UAACC,QAAD,EAAWC,OAAX;AAAA,MAAoBC,IAApB,uEAA2B,KAA3B;AAAA,SAAqC,MAAMzB,QAAN,IAAkB;AACpF,QAAI;AACA,YAAM0B,MAAM,GAAG;AACXnB,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX;AADE,OAAf;AAKA,YAAMH,QAAQ,GAAG,MAAMd,KAAK,CAACqC,IAAN,CAAW,mCAAX,EAAgDJ,QAAhD,EAA0DG,MAA1D,CAAvB;AAEA1B,MAAAA,QAAQ,CAAC;AACLU,QAAAA,IAAI,EAAEnB,WADD;AAELoB,QAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAFb,OAAD,CAAR;AAKAZ,MAAAA,QAAQ,CAACF,QAAQ,CAAC2B,IAAI,GAAG,iBAAH,GAAuB,iBAA5B,EAA+C,SAA/C,CAAT,CAAR;;AAEA,UAAI,CAACA,IAAL,EAAW;AACPD,QAAAA,OAAO,CAACI,IAAR,CAAa,YAAb;AACH;AACJ,KAlBD,CAkBE,OAAOf,GAAP,EAAY;AACV,YAAMgB,MAAM,GAAGhB,GAAG,CAACT,QAAJ,CAAaQ,IAAb,CAAkBiB,MAAjC;;AAEA,UAAIA,MAAJ,EAAY;AACRA,QAAAA,MAAM,CAACC,OAAP,CAAeC,KAAK,IAAI;AACpB/B,UAAAA,QAAQ,CAACF,QAAQ,CAACiC,KAAK,CAACjB,GAAP,EAAY,QAAZ,CAAT,CAAR;AACH,SAFD;AAGH;;AAEDd,MAAAA,QAAQ,CAAC;AACLU,QAAAA,IAAI,EAAElB,aADD;AAELmB,QAAAA,OAAO,EAAE;AAAEG,UAAAA,GAAG,EAAED,GAAG,CAACT,QAAJ,CAAaW,UAApB;AAAgCC,UAAAA,MAAM,EAAEH,GAAG,CAACT,QAAJ,CAAaY;AAArD;AAFJ,OAAD,CAAR;AAIH;AACJ,GAjCgC;AAAA,CAA1B,C,CAmCP;;AACA,OAAO,MAAMgB,iBAAiB,GAAG,CAACT,QAAD,EAAWC,OAAX,KAAuB,MAAMxB,QAAN,IAAkB;AACtE,MAAI;AACA,UAAM0B,MAAM,GAAG;AACXnB,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADE,KAAf;AAKA,UAAMH,QAAQ,GAAG,MAAMd,KAAK,CAAC2C,GAAN,CAAU,8CAAV,EAA0DV,QAA1D,EAAoEG,MAApE,CAAvB;AAEA1B,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAEjB,cADD;AAELkB,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAFb,KAAD,CAAR;AAKAZ,IAAAA,QAAQ,CAACF,QAAQ,CAAC,oBAAD,EAAuB,SAAvB,CAAT,CAAR;AACA0B,IAAAA,OAAO,CAACI,IAAR,CAAa,YAAb;AAEH,GAhBD,CAgBE,OAAOf,GAAP,EAAY;AACV,UAAMgB,MAAM,GAAGhB,GAAG,CAACT,QAAJ,CAAaQ,IAAb,CAAkBiB,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACC,OAAP,CAAeC,KAAK,IAAI;AACpB/B,QAAAA,QAAQ,CAACF,QAAQ,CAACiC,KAAD,EAAQ,QAAR,CAAT,CAAR;AACH,OAFD;AAGH;;AAED/B,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAElB,aADD;AAELmB,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACT,QAAJ,CAAaW,UAApB;AAAgCC,QAAAA,MAAM,EAAEH,GAAG,CAACT,QAAJ,CAAaY;AAArD;AAFJ,KAAD,CAAR;AAIH;AAEJ,CAhCM,C,CAkCP;;AACA,OAAO,MAAMkB,gBAAgB,GAAG,CAACX,QAAD,EAAWC,OAAX,KAAuB,MAAMxB,QAAN,IAAkB;AACrE,MAAI;AACA,UAAM0B,MAAM,GAAG;AACXnB,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADE,KAAf;AAKA,UAAMH,QAAQ,GAAG,MAAMd,KAAK,CAAC2C,GAAN,CAAU,6CAAV,EAAyDV,QAAzD,EAAmEG,MAAnE,CAAvB;AAEA1B,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAEjB,cADD;AAELkB,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAFb,KAAD,CAAR;AAKAZ,IAAAA,QAAQ,CAACF,QAAQ,CAAC,mBAAD,EAAsB,SAAtB,CAAT,CAAR;AACA0B,IAAAA,OAAO,CAACI,IAAR,CAAa,YAAb;AAEH,GAhBD,CAgBE,OAAOf,GAAP,EAAY;AACV,UAAMgB,MAAM,GAAGhB,GAAG,CAACT,QAAJ,CAAaQ,IAAb,CAAkBiB,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACC,OAAP,CAAeC,KAAK,IAAI;AACpB/B,QAAAA,QAAQ,CAACF,QAAQ,CAACiC,KAAK,CAACjB,GAAP,EAAY,QAAZ,CAAT,CAAR;AACH,OAFD;AAGH;;AAEDd,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAElB,aADD;AAELmB,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACT,QAAJ,CAAaW,UAApB;AAAgCC,QAAAA,MAAM,EAAEH,GAAG,CAACT,QAAJ,CAAaY;AAArD;AAFJ,KAAD,CAAR;AAIH;AACJ,CA/BM,C,CAiCP;;AACA,OAAO,MAAMmB,oBAAoB,GAAGC,EAAE,IAAI,MAAMpC,QAAN,IAAkB;AACxD,MAAI;AACA,UAAMI,QAAQ,GAAG,MAAMd,KAAK,CAAC+C,MAAN,CAAc,gDAA+CD,EAAG,EAAhE,CAAvB;AAEApC,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAEjB,cADD;AAELkB,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAFb,KAAD,CAAR;AAIAZ,IAAAA,QAAQ,CAACF,QAAQ,CAAC,oBAAD,EAAuB,SAAvB,CAAT,CAAR;AACH,GARD,CAQE,OAAOe,GAAP,EAAY;AAEVb,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAElB,aADD;AAELmB,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACT,QAAJ,CAAaW,UAApB;AAAgCC,QAAAA,MAAM,EAAEH,GAAG,CAACT,QAAJ,CAAaY;AAArD;AAFJ,KAAD,CAAR;AAIH;AACJ,CAhBM,C,CAkBP;;AACA,OAAO,MAAMsB,mBAAmB,GAAGF,EAAE,IAAI,MAAMpC,QAAN,IAAkB;AACvD,MAAI;AACA,UAAMI,QAAQ,GAAG,MAAMd,KAAK,CAAC+C,MAAN,CAAc,+CAA8CD,EAAG,EAA/D,CAAvB;AAEApC,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAEjB,cADD;AAELkB,MAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAFb,KAAD,CAAR;AAIAZ,IAAAA,QAAQ,CAACF,QAAQ,CAAC,mBAAD,EAAsB,SAAtB,CAAT,CAAR;AACH,GARD,CAQE,OAAOe,GAAP,EAAY;AAEVb,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAElB,aADD;AAELmB,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACT,QAAJ,CAAaW,UAApB;AAAgCC,QAAAA,MAAM,EAAEH,GAAG,CAACT,QAAJ,CAAaY;AAArD;AAFJ,KAAD,CAAR;AAIH;AACJ,CAhBM,C,CAkBP;;AACA,OAAO,MAAMuB,iBAAiB,GAAG,MAAM,MAAMvC,QAAN,IAAkB;AACrD,MAAIwC,MAAM,CAACC,OAAP,CAAe,qEAAf,CAAJ,EAA2F;AACvF,QAAI;AACA,YAAMnD,KAAK,CAAC+C,MAAN,CAAa,mCAAb,CAAN;AAEArC,MAAAA,QAAQ,CAAC;AACLU,QAAAA,IAAI,EAAEd;AADD,OAAD,CAAR;AAGAI,MAAAA,QAAQ,CAAC;AACLU,QAAAA,IAAI,EAAEhB;AADD,OAAD,CAAR;AAIAM,MAAAA,QAAQ,CAACF,QAAQ,CAAC,+BAAD,CAAT,CAAR;AAEH,KAZD,CAYE,OAAOe,GAAP,EAAY;AAEVb,MAAAA,QAAQ,CAAC;AACLU,QAAAA,IAAI,EAAElB,aADD;AAELmB,QAAAA,OAAO,EAAE;AAAEG,UAAAA,GAAG,EAAED,GAAG,CAACT,QAAJ,CAAaW,UAApB;AAAgCC,UAAAA,MAAM,EAAEH,GAAG,CAACT,QAAJ,CAAaY;AAArD;AAFJ,OAAD,CAAR;AAKH;AACJ;AACJ,CAvBM","sourcesContent":["import axios from 'axios'\nimport {\n    GET_PROFILE,\n    PROFILE_ERROR,\n    UPDATE_PROFILE,\n    ACCOUNT_DELETED,\n    GET_PROFILES,\n    CLEAR_PROFILE,\n    GET_REPOS\n} from './constants'\nimport { setAlert } from './alertAction'\n\n//Get current users profile after loggin\nexport const getUserProfile = () => async dispatch => {\n    const accessToken = localStorage.getItem(\"token\")\n    try {\n        const response = await axios.get(\"http://localhost:5000/api/profile/me\", {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `bearer ${accessToken}`\n            },\n        })\n\n        console.log(\"profile Action =>\", response)\n\n        dispatch({\n            type: GET_PROFILE,\n            payload: response.data\n        })\n\n    } catch (err) {\n\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n\n    }\n}\n\n//Get All users profile after loggin\nexport const getAllProfiles = () => async dispatch => {\n    dispatch({ type: CLEAR_PROFILE })\n    try {\n        const response = await axios.get(\"http://localhost:5000/api/profile\")\n\n        dispatch({\n            type: GET_PROFILES,\n            payload: response.data\n        })\n    } catch (err) {\n\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n\n    }\n}\n\n//Get All users profile by ID after loggin\nexport const getProfileById = userId => async dispatch => {\n    try {\n        const response = await axios.get(`http://localhost:5000/api/profile/user/${userId}`)\n\n        dispatch({\n            type: GET_PROFILE,\n            payload: response.data\n        })\n\n    } catch (err) {\n\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n\n    }\n}\n\n//Get  users Git hub repos \nexport const getUserGithub = username => async dispatch => {\n    try {\n        const response = await axios.get(`http://localhost:5000/api/profile/github/${username}`)\n\n        dispatch({\n            type: GET_REPOS,\n            payload: response.data\n        })\n\n    } catch (err) {\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n\n    }\n}\n\n//Create or Update User Profile\nexport const createUserProfile = (formData, history, edit = false) => async dispatch => {\n    try {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        const response = await axios.post(\"http://localhost:5000/api/profile\", formData, config)\n\n        dispatch({\n            type: GET_PROFILE,\n            payload: response.data\n        })\n\n        dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'))\n\n        if (!edit) {\n            history.push('/dashboard')\n        }\n    } catch (err) {\n        const errors = err.response.data.errors\n\n        if (errors) {\n            errors.forEach(error => {\n                dispatch(setAlert(error.msg, 'danger'))\n            });\n        }\n\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n    }\n}\n\n// Add Experience \nexport const addUserExperience = (formData, history) => async dispatch => {\n    try {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        const response = await axios.put(\"http://localhost:5000/api/profile/experience\", formData, config)\n\n        dispatch({\n            type: UPDATE_PROFILE,\n            payload: response.data\n        })\n\n        dispatch(setAlert('Experience Created', 'success'))\n        history.push('/dashboard')\n\n    } catch (err) {\n        const errors = err.response.data.errors\n\n        if (errors) {\n            errors.forEach(error => {\n                dispatch(setAlert(error, 'danger'))\n            });\n        }\n\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n    }\n\n}\n\n// Add Education \nexport const addUserEducation = (formData, history) => async dispatch => {\n    try {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        const response = await axios.put(\"http://localhost:5000/api/profile/education\", formData, config)\n\n        dispatch({\n            type: UPDATE_PROFILE,\n            payload: response.data\n        })\n\n        dispatch(setAlert('Education Created', 'success'))\n        history.push('/dashboard')\n\n    } catch (err) {\n        const errors = err.response.data.errors\n\n        if (errors) {\n            errors.forEach(error => {\n                dispatch(setAlert(error.msg, 'danger'))\n            });\n        }\n\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n    }\n}\n\n// Delete  User Experience\nexport const deleteUserExperience = id => async dispatch => {\n    try {\n        const response = await axios.delete(`http://localhost:5000/api/profile/experience/${id}`)\n\n        dispatch({\n            type: UPDATE_PROFILE,\n            payload: response.data\n        });\n        dispatch(setAlert('Experience Deleted', 'success'));\n    } catch (err) {\n\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n    }\n}\n\n// Delete  User Education\nexport const deleteUserEducation = id => async dispatch => {\n    try {\n        const response = await axios.delete(`http://localhost:5000/api/profile/education/${id}`)\n\n        dispatch({\n            type: UPDATE_PROFILE,\n            payload: response.data\n        })\n        dispatch(setAlert('Education Deleted', 'success'))\n    } catch (err) {\n\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n    }\n}\n\n// Delete  User Education\nexport const deleteUserAccount = () => async dispatch => {\n    if (window.confirm('Are you sure ? Please note you all your information will be deleted')) {\n        try {\n            await axios.delete(\"http://localhost:5000/api/profile\")\n\n            dispatch({\n                type: CLEAR_PROFILE\n            })\n            dispatch({\n                type: ACCOUNT_DELETED\n            })\n\n            dispatch(setAlert('Your account has been deleted'))\n\n        } catch (err) {\n\n            dispatch({\n                type: PROFILE_ERROR,\n                payload: { msg: err.response.statusText, status: err.response.status }\n            })\n\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}