{"ast":null,"code":"import { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from '../actions/constants';\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nexport default function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return { ...state,\n        posts: payload,\n        loading: false\n      };\n\n    case GET_POST:\n      return { ...state,\n        post: payload,\n        loading: false\n      };\n\n    case ADD_POST:\n      return { ...state,\n        posts: [...state.posts, payload],\n        loading: false\n      };\n\n    case ADD_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: payload\n        }\n      };\n\n    case REMOVE_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: state.post.comments.filter(comment => comment._id !== payload)\n        },\n        loading: false\n      };\n\n    case POST_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n\n    case UPDATE_LIKES:\n      return { ...state,\n        posts: state.posts.map(post => post._id === payload.id ? { ...post,\n          likes: payload.likes\n        } : post),\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/lovelbangura/Desktop/Project/lets_connect/Backend/client/src/reducers/post.js"],"names":["GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","posts","post","loading","error","state","action","type","payload","comments","filter","comment","_id","map","id","likes"],"mappings":"AAAA,SACIA,SADJ,EAEIC,UAFJ,EAGIC,YAHJ,EAIIC,WAJJ,EAKIC,QALJ,EAMIC,QANJ,EAOIC,WAPJ,EAQIC,cARJ,QASO,sBATP;AAWA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,IAAI,EAAE,IAFW;AAGjBC,EAAAA,OAAO,EAAE,IAHQ;AAIjBC,EAAAA,KAAK,EAAE;AAJU,CAArB;AAOA,eAAe,YAAuC;AAAA,MAA9BC,KAA8B,uEAAtBL,YAAsB;AAAA,MAARM,MAAQ;AAClD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACI,SAAKf,SAAL;AACI,aAAO,EACH,GAAGa,KADA;AAEHJ,QAAAA,KAAK,EAAEO,OAFJ;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ,SAAKN,QAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHH,QAAAA,IAAI,EAAEM,OAFH;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ,SAAKP,QAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHJ,QAAAA,KAAK,EAAE,CAAC,GAAGI,KAAK,CAACJ,KAAV,EAAiBO,OAAjB,CAFJ;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ,SAAKL,WAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHH,QAAAA,IAAI,EAAE,EAAC,GAAGG,KAAK,CAACH,IAAV;AAAgBO,UAAAA,QAAQ,EAAED;AAA1B;AAFH,OAAP;;AAKJ,SAAKT,cAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHH,QAAAA,IAAI,EAAE,EACF,GAAGG,KAAK,CAACH,IADP;AAEFO,UAAAA,QAAQ,EAAEJ,KAAK,CAACH,IAAN,CAAWO,QAAX,CAAoBC,MAApB,CAA2BC,OAAO,IAAIA,OAAO,CAACC,GAAR,KAAgBJ,OAAtD;AAFR,SAFH;AAMHL,QAAAA,OAAO,EAAE;AANN,OAAP;;AASJ,SAAKV,UAAL;AACI,aAAO,EACH,GAAGY,KADA;AAEHD,QAAAA,KAAK,EAAEI,OAFJ;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAOJ,SAAKR,WAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYS,MAAZ,CAAmBR,IAAI,IAAIA,IAAI,CAACU,GAAL,KAAaJ,OAAxC,CAFJ;AAGHL,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ,SAAKT,YAAL;AACI,aAAO,EACH,GAAGW,KADA;AAEHJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYY,GAAZ,CAAgBX,IAAI,IAAIA,IAAI,CAACU,GAAL,KAAaJ,OAAO,CAACM,EAArB,GAA0B,EAAC,GAAGZ,IAAJ;AAAUa,UAAAA,KAAK,EAAEP,OAAO,CAACO;AAAzB,SAA1B,GAA6Db,IAArF,CAFJ;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ;AACI,aAAOE,KAAP;AA7DR;AA+DH","sourcesContent":["import {\n    GET_POSTS,\n    POST_ERROR,\n    UPDATE_LIKES,\n    DELETE_POST,\n    ADD_POST,\n    GET_POST,\n    ADD_COMMENT,\n    REMOVE_COMMENT\n} from '../actions/constants'\n\nconst initialState = {\n    posts: [],\n    post: null,\n    loading: true,\n    error: {}\n}\n\nexport default function(state = initialState, action) {\n    const { type, payload } = action\n    switch (type) {\n        case GET_POSTS:\n            return {\n                ...state,\n                posts: payload,\n                loading: false\n            }\n\n        case GET_POST:\n            return {\n                ...state,\n                post: payload,\n                loading: false\n            }\n\n        case ADD_POST:\n            return {\n                ...state,\n                posts: [...state.posts, payload],\n                loading: false\n            }\n\n        case ADD_COMMENT:\n            return {\n                ...state,\n                post: {...state.post, comments: payload }\n            }\n\n        case REMOVE_COMMENT:\n            return {\n                ...state,\n                post: {\n                    ...state.post,\n                    comments: state.post.comments.filter(comment => comment._id !== payload)\n                },\n                loading: false\n            }\n\n        case POST_ERROR:\n            return {\n                ...state,\n                error: payload,\n                loading: false\n            }\n\n\n        case DELETE_POST:\n            return {\n                ...state,\n                posts: state.posts.filter(post => post._id !== payload),\n                loading: false\n            }\n\n        case UPDATE_LIKES:\n            return {\n                ...state,\n                posts: state.posts.map(post => post._id === payload.id ? {...post, likes: payload.likes } : post),\n                loading: false\n            }\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}