{"ast":null,"code":"var _jsxFileName = \"/Users/lovelbangura/Desktop/Project/lets_connect/Backend/client/src/components/profile/ProfileGithub.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../layouts/Spinner';\nimport { connect } from 'react-redux';\nimport { getUserGithub } from '../../actions/profileAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProfileGithub = _ref => {\n  _s();\n\n  let {\n    username,\n    getUserGithub,\n    repos\n  } = _ref;\n  useEffect(() => {\n    getUserGithub(username);\n  }, [getUserGithub(username), repos]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-github\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-primary my-1\",\n        children: \"Recent Github Repos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this), repos === null ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 22\n      }, this) : repos.map(repo => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"repo bg-white p-1 my-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: repo.html_url,\n              target: \"_blank\",\n              rel: \"noopener noreferer\",\n              children: repo.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: repo.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 34\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"badge badge-primary\",\n              children: [\"Stars: \", repo.stargazers_count]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"badge badge-dark\",\n              children: [\"Watcher(s): \", repo.watchers_count]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"badge badge-light\",\n              children: [\"Fork(s): \", repo.forks_cunt]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 33\n        }, this)]\n      }, repo._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 29\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProfileGithub, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = ProfileGithub;\nProfileGithub.propTypes = {\n  getUserGithub: PropTypes.func.isRequired,\n  username: PropTypes.string.isRequired,\n  repos: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({\n  repos: state.profile.repos\n});\n\nexport default connect(mapStateToProps, {\n  getUserGithub\n})(ProfileGithub);\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileGithub\");","map":{"version":3,"sources":["/Users/lovelbangura/Desktop/Project/lets_connect/Backend/client/src/components/profile/ProfileGithub.js"],"names":["React","useEffect","Fragment","PropTypes","Spinner","connect","getUserGithub","ProfileGithub","username","repos","map","repo","html_url","name","description","stargazers_count","watchers_count","forks_cunt","_id","propTypes","func","isRequired","string","array","mapStateToProps","state","profile"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,aAAR,QAA4B,6BAA5B;;;AAEA,MAAOC,aAAa,GAAI,QAAsC;AAAA;;AAAA,MAArC;AAACC,IAAAA,QAAD;AAAWF,IAAAA,aAAX;AAA0BG,IAAAA;AAA1B,GAAqC;AAE1DR,EAAAA,SAAS,CAAC,MAAK;AACXK,IAAAA,aAAa,CAACE,QAAD,CAAb;AACH,GAFQ,EAEN,CAACF,aAAa,CAACE,QAAD,CAAd,EAA0BC,KAA1B,CAFM,CAAT;AAIA,sBACI,QAAC,QAAD;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAESA,KAAK,KAAK,IAAV,gBACA,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cADA,GAGGA,KAAK,CAACC,GAAN,CAAUC,IAAI,iBACV;AAAoB,QAAA,SAAS,EAAC,wBAA9B;AAAA,gCACI;AAAA,kCACI;AAAA,mCACI;AAAG,cAAA,IAAI,EAAEA,IAAI,CAACC,QAAd;AAAwB,cAAA,MAAM,EAAC,QAA/B;AAAwC,cAAA,GAAG,EAAC,oBAA5C;AAAA,wBACKD,IAAI,CAACE;AADV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAMC;AAAA,sBAAIF,IAAI,CAACG;AAAT;AAAA;AAAA;AAAA;AAAA,kBAND;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eASI;AAAA,iCACI;AAAA,oCACI;AAAI,cAAA,SAAS,EAAC,qBAAd;AAAA,oCACYH,IAAI,CAACI,gBADjB;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAII;AAAI,cAAA,SAAS,EAAC,kBAAd;AAAA,yCACiBJ,IAAI,CAACK,cADtB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,eAOI;AAAI,cAAA,SAAS,EAAC,mBAAd;AAAA,sCACcL,IAAI,CAACM,UADnB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBATJ;AAAA,SAAUN,IAAI,CAACO,GAAf;AAAA;AAAA;AAAA;AAAA,cADJ,CALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAsCH,CA5CD;;GAAOX,a;;KAAAA,a;AA8CPA,aAAa,CAACY,SAAd,GAA0B;AACtBb,EAAAA,aAAa,EAAEH,SAAS,CAACiB,IAAV,CAAeC,UADR;AAEtBb,EAAAA,QAAQ,EAAEL,SAAS,CAACmB,MAAV,CAAiBD,UAFL;AAGtBZ,EAAAA,KAAK,EAAEN,SAAS,CAACoB,KAAV,CAAgBF;AAHD,CAA1B;;AAMA,MAAMG,eAAe,GAAGC,KAAK,KAAK;AAChChB,EAAAA,KAAK,EAAEgB,KAAK,CAACC,OAAN,CAAcjB;AADW,CAAL,CAA7B;;AAIA,eAAeJ,OAAO,CAACmB,eAAD,EAAkB;AAAClB,EAAAA;AAAD,CAAlB,CAAP,CAA0CC,aAA1C,CAAf","sourcesContent":["import React, {useEffect, Fragment} from 'react'\nimport PropTypes from 'prop-types'\nimport Spinner from '../layouts/Spinner'\nimport {connect} from 'react-redux'\nimport {getUserGithub} from '../../actions/profileAction'\n\nconst  ProfileGithub =  ({username, getUserGithub, repos}) => {\n\n    useEffect(() =>{\n        getUserGithub(username)\n    }, [getUserGithub(username), repos])\n\n    return (\n        <Fragment>\n            <div className=\"profile-github\">\n                <h2 className=\"text-primary my-1\">Recent Github Repos</h2>\n                    {repos === null ? \n                    (<Spinner />)  :\n                    (\n                        repos.map(repo => (\n                            <div key={repo._id} className=\"repo bg-white p-1 my-1\">\n                                <div>\n                                    <h4>\n                                        <a href={repo.html_url} target=\"_blank\" rel=\"noopener noreferer\">\n                                            {repo.name}\n                                        </a>\n                                    </h4>\n                                 <p>{repo.description}</p>\n                                </div>\n                                <div>\n                                    <ul>\n                                        <li className=\"badge badge-primary\">\n                                            Stars: {repo.stargazers_count}\n                                        </li>\n                                        <li className=\"badge badge-dark\">\n                                            Watcher(s): {repo.watchers_count}\n                                        </li>\n                                        <li className=\"badge badge-light\">\n                                            Fork(s): {repo.forks_cunt}\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                        ))\n                    )\n                  }\n\n            </div>\n        </Fragment>\n    )\n}\n\nProfileGithub.propTypes = {\n    getUserGithub: PropTypes.func.isRequired,\n    username: PropTypes.string.isRequired,\n    repos: PropTypes.array.isRequired,\n}\n\nconst mapStateToProps = state => ({\n  repos: state.profile.repos\n})\n\nexport default connect(mapStateToProps, {getUserGithub})(ProfileGithub)\n\n"]},"metadata":{},"sourceType":"module"}