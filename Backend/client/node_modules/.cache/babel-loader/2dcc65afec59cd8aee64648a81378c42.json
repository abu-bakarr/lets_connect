{"ast":null,"code":"var _jsxFileName = \"/Users/lovelbangura/Desktop/Project/lets_connect/Backend/client/src/components/profiles/Profiles.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Spinner from '../layouts/Spinner';\nimport PropTypes from 'prop-types';\nimport ProfileItem from './ProfileItem';\nimport { getAllProfiles } from '../../actions/profileAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Profiles = _ref => {\n  _s();\n\n  let {\n    getAllProfiles,\n    profile: {\n      profiles,\n      loading\n    }\n  } = _ref;\n  useEffect(() => {\n    getAllProfiles();\n  }, [getAllProfiles]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"large text-primary\",\n        children: \"Developers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"lead\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fab fa-connectdevelop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 41\n        }, this), \"Browser and Connect with Developers\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profiles\",\n        children: profiles.length > 0 ? profiles.map(profile => /*#__PURE__*/_jsxDEV(ProfileItem, {\n          profile: profile\n        }, profile._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 45\n        }, this)) : /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"No Profiles found.....\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 29\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Profiles, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Profiles;\nProfiles.propTypes = {\n  getAllProfiles: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getAllProfiles\n})(Profiles);\n\nvar _c;\n\n$RefreshReg$(_c, \"Profiles\");","map":{"version":3,"sources":["/Users/lovelbangura/Desktop/Project/lets_connect/Backend/client/src/components/profiles/Profiles.js"],"names":["React","Fragment","useEffect","connect","Spinner","PropTypes","ProfileItem","getAllProfiles","Profiles","profile","profiles","loading","length","map","_id","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,cAAR,QAA6B,6BAA7B;;;AAEA,MAAOC,QAAQ,GAAG,QAAoD;AAAA;;AAAA,MAAnD;AAAED,IAAAA,cAAF;AAAkBE,IAAAA,OAAO,EAAE;AAACC,MAAAA,QAAD;AAAWC,MAAAA;AAAX;AAA3B,GAAmD;AAClET,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,cAAc;AACjB,GAFQ,EAEN,CAACA,cAAD,CAFM,CAAT;AAIA,sBACI,QAAC,QAAD;AAAA,cACKI,OAAO,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAH,gBACQ,QAAC,QAAD;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEQ;AAAG,QAAA,SAAS,EAAC,MAAb;AAAA,gCACI;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFR,eAOI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,kBACKD,QAAQ,CAACE,MAAT,GAAkB,CAAlB,GACGF,QAAQ,CAACG,GAAT,CAAaJ,OAAO,iBAChB,QAAC,WAAD;AAA+B,UAAA,OAAO,EAAEA;AAAxC,WAAkBA,OAAO,CAACK,GAA1B;AAAA;AAAA;AAAA;AAAA,gBADJ,CADH,gBAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANL;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFpB;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBH,CA5BD;;GAAON,Q;;KAAAA,Q;AA8BPA,QAAQ,CAACO,SAAT,GAAqB;AACrBR,EAAAA,cAAc,EAAEF,SAAS,CAACW,IAAV,CAAeC,UADV;AAErBR,EAAAA,OAAO,EAAEJ,SAAS,CAACa,MAAV,CAAiBD;AAFL,CAArB;;AAKA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAC9BX,EAAAA,OAAO,EAAEW,KAAK,CAACX;AADe,CAAL,CAA7B;;AAGA,eAAeN,OAAO,CAACgB,eAAD,EAAkB;AAACZ,EAAAA;AAAD,CAAlB,CAAP,CAA2CC,QAA3C,CAAf","sourcesContent":["import React, {Fragment, useEffect} from 'react'\nimport {connect} from 'react-redux'\nimport Spinner from '../layouts/Spinner'\nimport PropTypes from 'prop-types'\nimport ProfileItem from './ProfileItem'\nimport {getAllProfiles} from '../../actions/profileAction'\n\nconst  Profiles = ({ getAllProfiles, profile: {profiles, loading}}) =>{\n    useEffect(() => {\n        getAllProfiles()\n    }, [getAllProfiles])\n\n    return (\n        <Fragment>\n            {loading ? <Spinner />  : \n                            <Fragment>\n                                <h1 className=\"large text-primary\">Developers</h1>\n                                    <p className=\"lead\">\n                                        <i className=\"fab fa-connectdevelop\"></i>\n                                        Browser and Connect with Developers\n                                    </p>\n                                \n                                <div className=\"profiles\">\n                                    {profiles.length > 0 ?  (\n                                        profiles.map(profile => (\n                                            <ProfileItem key={profile._id} profile={profile} />\n                                        ))\n                                        ) : \n                                     <h4>No Profiles found.....</h4>\n                                    }\n                                </div>\n                            </Fragment>\n            }\n        </Fragment>\n    )\n}\n\nProfiles.propTypes = {\ngetAllProfiles: PropTypes.func.isRequired,\nprofile: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    profile: state.profile\n})\nexport default connect(mapStateToProps, {getAllProfiles})(Profiles)\n\n"]},"metadata":{},"sourceType":"module"}